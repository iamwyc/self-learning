/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.iamwyc.api.hello;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-14")
public class HelloResponse implements org.apache.thrift.TBase<HelloResponse, HelloResponse._Fields>, java.io.Serializable, Cloneable, Comparable<HelloResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HelloResponse");

  private static final org.apache.thrift.protocol.TField WELCOME_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("welcomeString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GIFTS_FIELD_DESC = new org.apache.thrift.protocol.TField("gifts", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HelloResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HelloResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String welcomeString; // required
  public int serviceId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<String> gifts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WELCOME_STRING((short)1, "welcomeString"),
    SERVICE_ID((short)2, "serviceId"),
    GIFTS((short)3, "gifts");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WELCOME_STRING
          return WELCOME_STRING;
        case 2: // SERVICE_ID
          return SERVICE_ID;
        case 3: // GIFTS
          return GIFTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVICEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WELCOME_STRING, new org.apache.thrift.meta_data.FieldMetaData("welcomeString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFTS, new org.apache.thrift.meta_data.FieldMetaData("gifts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloResponse.class, metaDataMap);
  }

  public HelloResponse() {
  }

  public HelloResponse(
    String welcomeString,
    int serviceId,
    java.util.List<String> gifts)
  {
    this();
    this.welcomeString = welcomeString;
    this.serviceId = serviceId;
    setServiceIdIsSet(true);
    this.gifts = gifts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HelloResponse(HelloResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWelcomeString()) {
      this.welcomeString = other.welcomeString;
    }
    this.serviceId = other.serviceId;
    if (other.isSetGifts()) {
      java.util.List<String> __this__gifts = new java.util.ArrayList<String>(other.gifts);
      this.gifts = __this__gifts;
    }
  }

  public HelloResponse deepCopy() {
    return new HelloResponse(this);
  }

  @Override
  public void clear() {
    this.welcomeString = null;
    setServiceIdIsSet(false);
    this.serviceId = 0;
    this.gifts = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getWelcomeString() {
    return this.welcomeString;
  }

  public HelloResponse setWelcomeString(@org.apache.thrift.annotation.Nullable String welcomeString) {
    this.welcomeString = welcomeString;
    return this;
  }

  public void unsetWelcomeString() {
    this.welcomeString = null;
  }

  /** Returns true if field welcomeString is set (has been assigned a value) and false otherwise */
  public boolean isSetWelcomeString() {
    return this.welcomeString != null;
  }

  public void setWelcomeStringIsSet(boolean value) {
    if (!value) {
      this.welcomeString = null;
    }
  }

  public int getServiceId() {
    return this.serviceId;
  }

  public HelloResponse setServiceId(int serviceId) {
    this.serviceId = serviceId;
    setServiceIdIsSet(true);
    return this;
  }

  public void unsetServiceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEID_ISSET_ID);
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEID_ISSET_ID);
  }

  public void setServiceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEID_ISSET_ID, value);
  }

  public int getGiftsSize() {
    return (this.gifts == null) ? 0 : this.gifts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getGiftsIterator() {
    return (this.gifts == null) ? null : this.gifts.iterator();
  }

  public void addToGifts(String elem) {
    if (this.gifts == null) {
      this.gifts = new java.util.ArrayList<String>();
    }
    this.gifts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getGifts() {
    return this.gifts;
  }

  public HelloResponse setGifts(@org.apache.thrift.annotation.Nullable java.util.List<String> gifts) {
    this.gifts = gifts;
    return this;
  }

  public void unsetGifts() {
    this.gifts = null;
  }

  /** Returns true if field gifts is set (has been assigned a value) and false otherwise */
  public boolean isSetGifts() {
    return this.gifts != null;
  }

  public void setGiftsIsSet(boolean value) {
    if (!value) {
      this.gifts = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case WELCOME_STRING:
      if (value == null) {
        unsetWelcomeString();
      } else {
        setWelcomeString((String)value);
      }
      break;

    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((Integer)value);
      }
      break;

    case GIFTS:
      if (value == null) {
        unsetGifts();
      } else {
        setGifts((java.util.List<String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WELCOME_STRING:
      return getWelcomeString();

    case SERVICE_ID:
      return getServiceId();

    case GIFTS:
      return getGifts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WELCOME_STRING:
      return isSetWelcomeString();
    case SERVICE_ID:
      return isSetServiceId();
    case GIFTS:
      return isSetGifts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HelloResponse)
      return this.equals((HelloResponse)that);
    return false;
  }

  public boolean equals(HelloResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_welcomeString = true && this.isSetWelcomeString();
    boolean that_present_welcomeString = true && that.isSetWelcomeString();
    if (this_present_welcomeString || that_present_welcomeString) {
      if (!(this_present_welcomeString && that_present_welcomeString))
        return false;
      if (!this.welcomeString.equals(that.welcomeString))
        return false;
    }

    boolean this_present_serviceId = true;
    boolean that_present_serviceId = true;
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (this.serviceId != that.serviceId)
        return false;
    }

    boolean this_present_gifts = true && this.isSetGifts();
    boolean that_present_gifts = true && that.isSetGifts();
    if (this_present_gifts || that_present_gifts) {
      if (!(this_present_gifts && that_present_gifts))
        return false;
      if (!this.gifts.equals(that.gifts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWelcomeString()) ? 131071 : 524287);
    if (isSetWelcomeString())
      hashCode = hashCode * 8191 + welcomeString.hashCode();

    hashCode = hashCode * 8191 + serviceId;

    hashCode = hashCode * 8191 + ((isSetGifts()) ? 131071 : 524287);
    if (isSetGifts())
      hashCode = hashCode * 8191 + gifts.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HelloResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWelcomeString()).compareTo(other.isSetWelcomeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelcomeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.welcomeString, other.welcomeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGifts()).compareTo(other.isSetGifts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGifts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gifts, other.gifts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HelloResponse(");
    boolean first = true;

    sb.append("welcomeString:");
    if (this.welcomeString == null) {
      sb.append("null");
    } else {
      sb.append(this.welcomeString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceId:");
    sb.append(this.serviceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gifts:");
    if (this.gifts == null) {
      sb.append("null");
    } else {
      sb.append(this.gifts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HelloResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HelloResponseStandardScheme getScheme() {
      return new HelloResponseStandardScheme();
    }
  }

  private static class HelloResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<HelloResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HelloResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WELCOME_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.welcomeString = iprot.readString();
              struct.setWelcomeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceId = iprot.readI32();
              struct.setServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GIFTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.gifts = new java.util.ArrayList<String>(_list0.size);
                @org.apache.thrift.annotation.Nullable String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.gifts.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGiftsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HelloResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.welcomeString != null) {
        oprot.writeFieldBegin(WELCOME_STRING_FIELD_DESC);
        oprot.writeString(struct.welcomeString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
      oprot.writeI32(struct.serviceId);
      oprot.writeFieldEnd();
      if (struct.gifts != null) {
        oprot.writeFieldBegin(GIFTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.gifts.size()));
          for (String _iter3 : struct.gifts)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HelloResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HelloResponseTupleScheme getScheme() {
      return new HelloResponseTupleScheme();
    }
  }

  private static class HelloResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<HelloResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HelloResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWelcomeString()) {
        optionals.set(0);
      }
      if (struct.isSetServiceId()) {
        optionals.set(1);
      }
      if (struct.isSetGifts()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetWelcomeString()) {
        oprot.writeString(struct.welcomeString);
      }
      if (struct.isSetServiceId()) {
        oprot.writeI32(struct.serviceId);
      }
      if (struct.isSetGifts()) {
        {
          oprot.writeI32(struct.gifts.size());
          for (String _iter4 : struct.gifts)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HelloResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.welcomeString = iprot.readString();
        struct.setWelcomeStringIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serviceId = iprot.readI32();
        struct.setServiceIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.gifts = new java.util.ArrayList<String>(_list5.size);
          @org.apache.thrift.annotation.Nullable String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.gifts.add(_elem6);
          }
        }
        struct.setGiftsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

